apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.fernandocejas.frodo'


Properties configProperties = new Properties()
configProperties.load(project.rootProject.file('config.properties').newDataInputStream())

def libs = rootProject.ext.libraries;

def releaseDate() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def releaseTimeMillis() {
    return System.currentTimeMillis();
}

android {
    compileSdkVersion Integer.parseInt(BUILD_COMPILE_SDK_VERSION)
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "tech.saymagic.mdocker"
        minSdkVersion Integer.parseInt(MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(BUILD_TARGET_SDK_VERSION)
        versionCode Integer.parseInt(VERSION_CODE)
        versionName VERSION_NAME
        manifestPlaceholders = [appFlavor   : name,
                                       appBuildTime: releaseTimeMillis()]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            try {
                Properties keyProperties = new Properties()
                keyProperties.load(project.file('key.properties').newDataInputStream())
                storeFile file(keyProperties.getProperty("storeFile"))
                storePassword keyProperties.getProperty("storePassword")
                keyAlias keyProperties.getProperty("keyAlias")
                keyPassword keyProperties.getProperty("keyPassword")
            } catch (ex) {
                logger.warning("What's up man? For release builds, you must define KEYSTORE_PASSWORD and KEY_PASSWORD.")
            }
        }
    }

    lintOptions {
        abortOnError false
    }
    
    packagingOptions{
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            signingConfig signingConfigs.release
        }
    }

    productFlavors{
        play{

        }
        other{

        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile "junit:junit:${libs.junit}"

    /* ReactiveX library*/
    compile "io.reactivex:rxjava:${libs.rxjava}"
    compile "io.reactivex:rxandroid:${libs.rxandroid}"

    /* Google library*/
    apt "com.google.dagger:dagger-compiler:${libs.dagger}"
    compile "com.android.support:support-v4:${libs.supportVersion}"
    compile "com.android.support:appcompat-v7:${libs.supportVersion}"
    compile "com.android.support:cardview-v7:${libs.supportVersion}"
    compile "com.android.support:recyclerview-v7:${libs.supportVersion}"
    compile "com.android.support:design:${libs.supportVersion}"
    compile "com.google.code.gson:gson:${libs.gson}"
    compile "com.google.dagger:dagger:${libs.dagger}"
    compile "com.github.bumptech.glide:glide:${libs.glide}"
    compile "com.android.support:multidex:${libs.multidex}"
    compile "com.google.firebase:firebase-core:${libs.firebase}"
    compile "com.google.firebase:firebase-crash:${libs.firebase}"
    compile "com.google.firebase:firebase-config:${libs.firebase}"

    /* Square Library*/
    compile "com.jakewharton:butterknife:${libs.butterknife}"
    compile "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    compile "com.squareup.retrofit2:adapter-rxjava:${libs.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${libs.retrofit}"
    compile "com.squareup.okhttp3:okhttp:${libs.okhttp}"
    compile "com.squareup.okhttp3:logging-interceptor:${libs.okhttp}"
    debugCompile "com.squareup.leakcanary:leakcanary-android:${libs.leakcanary}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libs.leakcanary}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libs.leakcanary}"

    /* Facebook*/
    compile "com.facebook.stetho:stetho:${libs.stetho}"
    compile "com.facebook.stetho:stetho-okhttp3:${libs.stetho}"
    compile "com.facebook.stetho:stetho-js-rhino:${libs.stetho}"

    /* Other Library*/
    compile "com.github.orhanobut:logger:${libs.logger}"
    compile "com.annimon:stream:${libs.annimon_stream}"
}

apply plugin: 'com.google.gms.google-services'

